// Code generated by goa v3.3.1, DO NOT EDIT.
//
// chatapi HTTP server types
//
// Command:
// $ goa gen chat-api/design

package server

import (
	chatapi "chat-api/gen/chatapi"
	chatapiviews "chat-api/gen/chatapi/views"

	goa "goa.design/goa/v3/pkg"
)

// GetchatRequestBody is the type of the "chatapi" service "getchat" endpoint
// HTTP request body.
type GetchatRequestBody struct {
	// room id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GoaChatResponseCollection is the type of the "chatapi" service "getchat"
// endpoint HTTP response body.
type GoaChatResponseCollection []*GoaChatResponse

// GoaChatResponse is used to define fields on response body types.
type GoaChatResponse struct {
	// room id
	ID int `form:"id" json:"id" xml:"id"`
	// user id
	UserID string `form:"UserId" json:"UserId" xml:"UserId"`
	// room name
	RoomName string `form:"RoomName" json:"RoomName" xml:"RoomName"`
	// member
	Member string `form:"Member" json:"Member" xml:"Member"`
	// chat
	Chat   string `form:"Chat" json:"Chat" xml:"Chat"`
	PostDt string `form:"PostDt" json:"PostDt" xml:"PostDt"`
}

// NewGoaChatResponseCollection builds the HTTP response body from the result
// of the "getchat" endpoint of the "chatapi" service.
func NewGoaChatResponseCollection(res chatapiviews.GoaChatCollectionView) GoaChatResponseCollection {
	body := make([]*GoaChatResponse, len(res))
	for i, val := range res {
		body[i] = marshalChatapiviewsGoaChatViewToGoaChatResponse(val)
	}
	return body
}

// NewGetchatPayload builds a chatapi service getchat endpoint payload.
func NewGetchatPayload(body *GetchatRequestBody) *chatapi.GetchatPayload {
	v := &chatapi.GetchatPayload{
		ID: *body.ID,
	}

	return v
}

// ValidateGetchatRequestBody runs the validations defined on GetchatRequestBody
func ValidateGetchatRequestBody(body *GetchatRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
